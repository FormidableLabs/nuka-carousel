{"version":3,"sources":["../src/carousel.tsx","../src/slide.tsx","../src/hooks/use-slide-intersection-observer.ts","../src/announce-slide.tsx","../src/slider-list.tsx","../src/default-controls.tsx","../src/types.ts","../src/utils.ts","../src/hooks/use-tween.ts","../src/controls.tsx","../src/control-styles.ts","../src/default-carousel-props.tsx","../src/hooks/use-frame-height.ts","../src/hooks/use-state-with-ref.ts"],"sourcesContent":["import React, { useEffect, useState, useRef, useCallback } from 'react';\nimport Slide from './slide';\nimport AnnounceSlide from './announce-slide';\nimport { getPercentOffsetForSlide, SliderList } from './slider-list';\nimport {\n  CarouselProps,\n  CellAlign,\n  InternalCarouselProps,\n  KeyCodeConfig,\n  KeyCodeFunction,\n  ScrollMode,\n} from './types';\nimport renderControls from './controls';\nimport defaultProps from './default-carousel-props';\nimport {\n  getNextMoveIndex,\n  getPrevMoveIndex,\n  getDefaultSlideIndex,\n  getBoundedIndex,\n} from './utils';\nimport { useFrameHeight } from './hooks/use-frame-height';\nimport { getDotIndexes } from './default-controls';\n\nexport const Carousel = (rawProps: CarouselProps): React.ReactElement => {\n  /**\n   * We need this cast because we want the component's properties to seem\n   * optional to external users, but always-present for the internal\n   * implementation.\n   *\n   * This cast is safe due to the `Carousel.defaultProps = defaultProps;`\n   * statement below. That guarantees all the properties are present, since\n   * `defaultProps` has type `InternalCarouselProps`.\n   */\n  const props = rawProps as InternalCarouselProps;\n\n  const {\n    adaptiveHeight,\n    adaptiveHeightAnimation,\n    afterSlide,\n    animation,\n    autoplay,\n    autoplayInterval,\n    autoplayReverse,\n    beforeSlide,\n    cellAlign: propsCellAlign,\n    cellSpacing,\n    children,\n    className,\n    disableAnimation,\n    dragging: desktopDraggingEnabled,\n    dragThreshold: propsDragThreshold,\n    enableKeyboardControls,\n    frameAriaLabel,\n    innerRef,\n    keyCodeConfig,\n    onDrag,\n    onDragEnd,\n    onDragStart,\n    onUserNavigation,\n    pauseOnHover,\n    renderAnnounceSlideMessage,\n    scrollMode: propsScrollMode,\n    slideIndex,\n    slidesToScroll: propsSlidesToScroll,\n    slidesToShow: propsSlidesToShow,\n    slideWidth,\n    speed,\n    style,\n    swiping: mobileDraggingEnabled,\n    wrapAround,\n    zoomScale,\n  } = props;\n\n  const filteredSlides = React.Children.toArray(children).filter(Boolean);\n  const slideCount = filteredSlides.length;\n\n  const cellAlign: CellAlign =\n    slideWidth || propsSlidesToScroll === 'auto' ? 'left' : propsCellAlign;\n\n  const scrollMode: ScrollMode =\n    propsSlidesToScroll === 'auto' ? ScrollMode.remainder : propsScrollMode;\n\n  const [slideIOEntries, setSlideIOEntries] = useState(\n    new Map<string, boolean>()\n  );\n\n  const visibleCount = Array.from(slideIOEntries).filter(\n    ([, visible]) => visible\n  ).length;\n\n  const [constantVisibleCount, setConstantVisibleCount] =\n    useState<number>(visibleCount);\n\n  const slidesToShow = slideWidth ? constantVisibleCount : propsSlidesToShow;\n\n  const slidesToScroll =\n    animation === 'fade'\n      ? slidesToShow\n      : propsSlidesToScroll === 'auto'\n      ? Math.max(constantVisibleCount, 1)\n      : propsSlidesToScroll;\n\n  const [currentSlide, setCurrentSlide] = useState<number>(() =>\n    getDefaultSlideIndex(\n      slideIndex,\n      slideCount,\n      slidesToShow,\n      slidesToScroll,\n      cellAlign,\n      autoplayReverse,\n      scrollMode\n    )\n  );\n  const [pause, setPause] = useState<boolean>(false);\n  const [isDragging, setIsDragging] = useState<boolean>(false);\n  const [dragDistance, setDragDistance] = useState<number>(0);\n  const [animationDistance, setAnimationDistance] = useState<number>(0);\n  const [isAnimating, setIsAnimating] = useState<boolean>(false);\n\n  const updateSlideIOEntry = useCallback(\n    (id: string, isFullyVisible: boolean) => {\n      if (!!slideIOEntries.get(id) === isFullyVisible) return;\n\n      setSlideIOEntries((prev) => {\n        const newMap = new Map(prev);\n        newMap.set(id, isFullyVisible);\n        return newMap;\n      });\n    },\n    [slideIOEntries]\n  );\n\n  const prevDragged = useRef(false);\n\n  useEffect(() => {\n    if (isDragging) prevDragged.current = true;\n\n    if (!(isDragging || isAnimating)) {\n      // Wait for the animation to complete after dragging\n      if (!prevDragged.current) setConstantVisibleCount(visibleCount);\n      prevDragged.current = false;\n    }\n  }, [isAnimating, isDragging, visibleCount]);\n\n  const prevXPosition = useRef<number | null>(null);\n  const preDragOffset = useRef<number>(0);\n  const sliderListRef = useRef<HTMLDivElement | null>(null);\n  const defaultCarouselRef = useRef<HTMLDivElement>(null);\n  const autoplayTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const autoplayLastTriggeredRef = useRef<number | null>(null);\n  const isMounted = useRef<boolean>(true);\n\n  const setSliderListRef = useCallback((node: HTMLDivElement) => {\n    if (node) {\n      // disable img draggable attribute by default, this will improve the dragging\n      // applying the querySelectorAll on just the descendants of the sliderList prevents\n      // impacting DOM elements outside our scope\n      node\n        .querySelectorAll('.slider-list img')\n        .forEach((el) => el.setAttribute('draggable', 'false'));\n    }\n    sliderListRef.current = node;\n  }, []);\n\n  useEffect(() => {\n    isMounted.current = true;\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n\n  const carouselRef = innerRef || defaultCarouselRef;\n\n  const goToSlide = useCallback(\n    (targetSlideUnbounded: number) => {\n      if (!sliderListRef.current || !carouselRef.current) return;\n\n      const targetSlideBounded = getBoundedIndex(\n        targetSlideUnbounded,\n        slideCount\n      );\n\n      const slideChanged = targetSlideUnbounded !== currentSlide;\n      slideChanged && beforeSlide(currentSlide, targetSlideBounded);\n\n      // Calculate the distance the slide transition animation needs to cover.\n      const currentOffset =\n        sliderListRef.current.getBoundingClientRect().left -\n        carouselRef.current.getBoundingClientRect().left;\n      const sliderWidth = sliderListRef.current.offsetWidth;\n      let targetOffset =\n        (getPercentOffsetForSlide(\n          targetSlideBounded,\n          slideCount,\n          slidesToShow,\n          cellAlign,\n          wrapAround\n        ) /\n          100) *\n        sliderWidth;\n      if (wrapAround) {\n        // We have to do a bit of a recovery effort to figure out the closest\n        // offset based on the direction we're going in the slides. The reason\n        // it's complicated is because, when wrapped, both the current offset\n        // and the calculated target offset are based on bounded slide indices -\n        // that is, when wrapping, we often skip back to the first or last slide\n        // seamlessly to make the carousel appear to infinitely repeat\n\n        // The DOM width of `slideCount` slides\n        const slideSetWidth = sliderWidth / 3;\n\n        if (targetSlideUnbounded < 0) {\n          targetOffset += slideSetWidth;\n        }\n        if (targetSlideUnbounded >= slideCount) {\n          targetOffset -= slideSetWidth;\n        }\n      }\n\n      setAnimationDistance(targetOffset - currentOffset);\n\n      if (slideChanged) {\n        setCurrentSlide(targetSlideBounded);\n\n        // if animation is disabled decrease the speed to 40\n        const msToEndOfAnimation = !disableAnimation ? speed || 500 : 40;\n        setTimeout(() => {\n          if (!isMounted.current) return;\n          afterSlide(targetSlideBounded);\n        }, msToEndOfAnimation);\n      }\n    },\n    [\n      afterSlide,\n      beforeSlide,\n      carouselRef,\n      cellAlign,\n      currentSlide,\n      disableAnimation,\n      speed,\n      slideCount,\n      slidesToShow,\n      wrapAround,\n    ]\n  );\n\n  const nextSlide = useCallback(() => {\n    const nextSlideIndex = getNextMoveIndex(\n      scrollMode,\n      wrapAround,\n      currentSlide,\n      slideCount,\n      slidesToScroll,\n      slidesToShow,\n      cellAlign\n    );\n\n    if (currentSlide !== nextSlideIndex) {\n      goToSlide(nextSlideIndex);\n    }\n  }, [\n    cellAlign,\n    currentSlide,\n    goToSlide,\n    slidesToScroll,\n    scrollMode,\n    slideCount,\n    slidesToShow,\n    wrapAround,\n  ]);\n\n  const prevSlide = useCallback(() => {\n    const prevSlideIndex = getPrevMoveIndex(\n      scrollMode,\n      wrapAround,\n      currentSlide,\n      slidesToScroll,\n      slidesToShow,\n      cellAlign\n    );\n\n    if (currentSlide !== prevSlideIndex) {\n      goToSlide(prevSlideIndex);\n    }\n  }, [\n    cellAlign,\n    currentSlide,\n    goToSlide,\n    slidesToScroll,\n    scrollMode,\n    slidesToShow,\n    wrapAround,\n  ]);\n\n  // When user changed the slideIndex property from outside.\n  const prevMovedToSlideIndex = useRef(slideIndex);\n  useEffect(() => {\n    if (\n      slideIndex !== undefined &&\n      slideIndex !== prevMovedToSlideIndex.current &&\n      !autoplayReverse\n    ) {\n      goToSlide(slideIndex);\n      prevMovedToSlideIndex.current = slideIndex;\n    }\n  }, [slideIndex, autoplayReverse, goToSlide]);\n\n  useEffect(() => {\n    let pauseStarted: number | null = null;\n\n    // Keep track of when autoplay was paused so we can resume it with the same\n    // remaining time to the next slide transition\n    if (pause) {\n      pauseStarted = Date.now();\n    }\n\n    return () => {\n      if (pauseStarted !== null && autoplayLastTriggeredRef.current !== null) {\n        autoplayLastTriggeredRef.current += Date.now() - pauseStarted;\n      }\n    };\n  }, [pause]);\n\n  useEffect(() => {\n    if (autoplay && !pause) {\n      // Adjust the timeout duration to account for changes that triggered the\n      // re-creation of this timeout, such as the currentSlide being changed\n      // periodically to make wrapAround loop forever\n      const adjustedTimeoutMs =\n        autoplayLastTriggeredRef.current !== null\n          ? autoplayInterval - (Date.now() - autoplayLastTriggeredRef.current)\n          : autoplayInterval;\n\n      autoplayTimeout.current = setTimeout(() => {\n        autoplayLastTriggeredRef.current = Date.now();\n\n        if (autoplayReverse) {\n          prevSlide();\n        } else {\n          nextSlide();\n        }\n      }, adjustedTimeoutMs);\n    }\n\n    // Clear the timeout if user hover on carousel\n    if (autoplay && pause) {\n      clearTimeout(autoplayTimeout.current);\n    }\n\n    return () => {\n      clearTimeout(autoplayTimeout.current);\n    };\n  }, [\n    pause,\n    autoplay,\n    autoplayInterval,\n    autoplayReverse,\n    prevSlide,\n    nextSlide,\n  ]);\n\n  const onKeyDown = (event: React.KeyboardEvent<HTMLDivElement>) => {\n    let keyCommand: KeyCodeFunction = null;\n    (Object.keys(keyCodeConfig) as (keyof KeyCodeConfig)[]).forEach(\n      (command) => {\n        if (keyCodeConfig[command]?.includes(event.keyCode)) {\n          keyCommand = command;\n        }\n      }\n    );\n\n    if (keyCommand === null) return;\n\n    // At this point we know some action is going to be triggered, so we\n    // preventDefault to avoid the browser interpreting the key event and\n    // stopPropagation to avoid any higher-up handlers from interpreting it.\n    event.preventDefault();\n    event.stopPropagation();\n\n    switch (keyCommand) {\n      case 'nextSlide':\n        onUserNavigation(event);\n        nextSlide();\n        break;\n      case 'previousSlide':\n        onUserNavigation(event);\n        prevSlide();\n        break;\n      case 'firstSlide':\n      case 'lastSlide': {\n        onUserNavigation(event);\n\n        const dotIndices = getDotIndexes(\n          slideCount,\n          slidesToScroll,\n          scrollMode,\n          slidesToShow,\n          wrapAround,\n          cellAlign\n        );\n\n        if (keyCommand === 'firstSlide') {\n          goToSlide(dotIndices[0]);\n        } else {\n          goToSlide(dotIndices[dotIndices.length - 1]);\n        }\n        break;\n      }\n      case 'pause':\n        setPause((p) => !p);\n        break;\n    }\n  };\n\n  const dragPositions = useRef<{ pos: number; time: number }[]>([]);\n\n  const handleDragEnd = (\n    e: React.MouseEvent<HTMLDivElement> | React.TouchEvent<HTMLDivElement>\n  ) => {\n    if (!isDragging || !carouselRef.current) return;\n\n    setIsDragging(false);\n\n    // Inertia calculation is used to allow quick flicks to scroll the carousel\n    // where they might not based on the start and end points of the gesture\n    // alone. In certain conditions, the inertia may also scroll the carousel\n    // several times.\n    let distanceFromInertia = 0;\n    if (dragPositions.current.length > 1) {\n      const startMove = dragPositions.current[0];\n      const endMove = dragPositions.current[dragPositions.current.length - 1];\n      const timeOffset = endMove.time - startMove.time;\n      const goodInertiaFeelConstant = 9;\n      const goodFrictionFeelConstant = 0.92;\n      const initialVelocity =\n        goodInertiaFeelConstant *\n        Math.abs((endMove.pos - startMove.pos) / timeOffset);\n      let velocity = initialVelocity;\n\n      while (Math.abs(velocity) > 1) {\n        distanceFromInertia += velocity;\n        velocity *= goodFrictionFeelConstant;\n      }\n    }\n    dragPositions.current = [];\n\n    const adjustedDragDistance =\n      Math.abs(dragDistance) + Math.abs(distanceFromInertia);\n\n    onDragEnd(e);\n\n    prevXPosition.current = null;\n    setDragDistance(0);\n\n    const oneScrollWidth =\n      carouselRef.current.offsetWidth *\n      Math.min(1, slidesToScroll / slidesToShow);\n    const dragThreshold = oneScrollWidth * propsDragThreshold;\n\n    if (adjustedDragDistance < dragThreshold) {\n      goToSlide(currentSlide);\n      return;\n    }\n\n    // If skipping over multiple slides at a time is still roughly trackable by\n    // your eyes, we allow for skipping multiple slides with a single gesture.\n    // This formula is just based off an observation that it is confusing to\n    // skip from slides 1 to 3 when only one slide is shown at a time, but\n    // skipping from 1 to 4 or so with two slides shown at a time is pulled-back\n    // enough that you can still roughly keep track of your place in the\n    // carousel.\n    const canMaintainVisualContinuity = slidesToShow >= 2 * slidesToScroll;\n    const timesToMove = canMaintainVisualContinuity\n      ? 1 + Math.floor((adjustedDragDistance - dragThreshold) / oneScrollWidth)\n      : 1;\n\n    let nextSlideIndex = currentSlide;\n    for (let index = 0; index < timesToMove; index += 1) {\n      if (dragDistance > 0) {\n        nextSlideIndex = getNextMoveIndex(\n          scrollMode,\n          wrapAround,\n          nextSlideIndex,\n          slideCount,\n          slidesToScroll,\n          slidesToShow,\n          cellAlign\n        );\n      } else {\n        nextSlideIndex = getPrevMoveIndex(\n          scrollMode,\n          wrapAround,\n          nextSlideIndex,\n          slidesToScroll,\n          slidesToShow,\n          cellAlign\n        );\n      }\n    }\n\n    if (nextSlideIndex !== currentSlide) {\n      onUserNavigation(e);\n    }\n\n    goToSlide(nextSlideIndex);\n  };\n\n  const onTouchStart = useCallback(\n    (e: React.TouchEvent<HTMLDivElement>) => {\n      if (\n        !mobileDraggingEnabled ||\n        !sliderListRef.current ||\n        !carouselRef.current\n      ) {\n        return;\n      }\n      setIsDragging(true);\n      preDragOffset.current =\n        sliderListRef.current.getBoundingClientRect().left -\n        carouselRef.current.getBoundingClientRect().left;\n\n      onDragStart(e);\n    },\n    [carouselRef, onDragStart, mobileDraggingEnabled]\n  );\n\n  const handlePointerMove = useCallback(\n    (xPosition: number) => {\n      if (!isDragging) return;\n\n      const isFirstMove = prevXPosition.current === null;\n      const delta =\n        prevXPosition.current !== null ? xPosition - prevXPosition.current : 0;\n      const nextDragDistance = dragDistance + delta;\n\n      const now = Date.now();\n      // Maintain a buffer of drag positions from the last 100ms\n      while (dragPositions.current.length > 0) {\n        if (now - dragPositions.current[0].time <= 100) {\n          break;\n        }\n        dragPositions.current.shift();\n      }\n      dragPositions.current.push({ pos: nextDragDistance, time: now });\n\n      if (!isFirstMove) {\n        // nextDragDistance will always be `0` on the first move event, so we\n        // skip it because the value is already set to 0 at this point\n        setDragDistance(nextDragDistance);\n      }\n\n      prevXPosition.current = xPosition;\n    },\n    [isDragging, dragDistance]\n  );\n\n  const onTouchMove = useCallback(\n    (e: React.TouchEvent<HTMLDivElement>) => {\n      if (!isDragging || !carouselRef.current) return;\n\n      onDragStart(e);\n\n      const moveValue = carouselRef.current.offsetWidth - e.touches[0].pageX;\n\n      handlePointerMove(moveValue);\n    },\n    [isDragging, carouselRef, handlePointerMove, onDragStart]\n  );\n\n  const onMouseDown = useCallback(\n    (e: React.MouseEvent<HTMLDivElement>) => {\n      if (\n        !desktopDraggingEnabled ||\n        !sliderListRef.current ||\n        !carouselRef.current\n      )\n        return;\n\n      setIsDragging(true);\n\n      preDragOffset.current =\n        sliderListRef.current.getBoundingClientRect().left -\n        carouselRef.current.getBoundingClientRect().left;\n\n      onDragStart(e);\n    },\n    [carouselRef, desktopDraggingEnabled, onDragStart]\n  );\n\n  const onMouseMove = useCallback(\n    (e: React.MouseEvent<HTMLDivElement>) => {\n      if (!isDragging || !carouselRef.current) return;\n\n      onDrag(e);\n\n      const offsetX =\n        e.clientX - carouselRef.current.getBoundingClientRect().left;\n      const moveValue = carouselRef.current.offsetWidth - offsetX;\n\n      handlePointerMove(moveValue);\n    },\n    [carouselRef, isDragging, handlePointerMove, onDrag]\n  );\n\n  const onMouseUp = (e: React.MouseEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    handleDragEnd(e);\n  };\n\n  const onMouseEnter = useCallback(() => {\n    if (pauseOnHover) {\n      setPause(true);\n    }\n  }, [pauseOnHover]);\n\n  const onMouseLeave = useCallback(() => {\n    if (pauseOnHover) {\n      setPause(false);\n    }\n  }, [pauseOnHover]);\n\n  const {\n    frameHeight,\n    handleVisibleSlideHeightChange,\n    initializedAdaptiveHeight,\n  } = useFrameHeight(adaptiveHeight, slidesToShow, slideCount);\n\n  const renderSlides = (typeOfSlide?: 'prev-cloned' | 'next-cloned') => {\n    const slides = filteredSlides.map((child, index) => {\n      return (\n        <Slide\n          key={`${typeOfSlide}-${index}`}\n          id={`${typeOfSlide}-${index}`}\n          count={slideCount}\n          index={index}\n          isCurrentSlide={currentSlide === index}\n          typeOfSlide={typeOfSlide}\n          wrapAround={wrapAround}\n          cellSpacing={cellSpacing}\n          animation={animation}\n          speed={speed}\n          zoomScale={zoomScale}\n          onVisibleSlideHeightChange={handleVisibleSlideHeightChange}\n          slideWidth={slideWidth}\n          updateIOEntry={updateSlideIOEntry}\n          adaptiveHeight={adaptiveHeight}\n          initializedAdaptiveHeight={initializedAdaptiveHeight}\n          carouselRef={carouselRef}\n        >\n          {child}\n        </Slide>\n      );\n    });\n\n    return slides;\n  };\n\n  return (\n    <div\n      className={'slider-container'}\n      style={{\n        position: 'relative',\n      }}\n      onMouseEnter={onMouseEnter}\n      onMouseLeave={onMouseLeave}\n    >\n      <AnnounceSlide\n        ariaLive={autoplay && !pause ? 'off' : 'polite'}\n        message={renderAnnounceSlideMessage({\n          currentSlide,\n          count: slideCount,\n        })}\n      />\n\n      {renderControls(\n        props,\n        slideCount,\n        currentSlide,\n        goToSlide,\n        nextSlide,\n        prevSlide,\n        slidesToScroll\n      )}\n\n      <div\n        className={['slider-frame', className || ''].join(' ').trim()}\n        style={{\n          overflow: 'hidden',\n          width: '100%',\n          position: 'relative',\n          outline: 'none',\n          touchAction: 'pan-y',\n          height: frameHeight,\n          transition: adaptiveHeightAnimation\n            ? 'height 300ms ease-in-out'\n            : undefined,\n          willChange: 'height',\n          userSelect: 'none',\n          ...style,\n        }}\n        aria-label={frameAriaLabel}\n        role=\"region\"\n        tabIndex={enableKeyboardControls ? 0 : -1}\n        onKeyDown={enableKeyboardControls ? onKeyDown : undefined}\n        ref={carouselRef}\n        onMouseUp={onMouseUp}\n        onMouseDown={onMouseDown}\n        onMouseMove={onMouseMove}\n        onMouseLeave={onMouseUp}\n        onTouchStart={onTouchStart}\n        onTouchEnd={handleDragEnd}\n        onTouchMove={onTouchMove}\n      >\n        <SliderList\n          animationDistance={animationDistance}\n          cellAlign={cellAlign}\n          currentSlide={currentSlide}\n          disableEdgeSwiping={props.disableEdgeSwiping}\n          draggedOffset={preDragOffset.current - dragDistance}\n          disableAnimation={disableAnimation}\n          easing={props.easing}\n          edgeEasing={props.edgeEasing}\n          isDragging={isDragging}\n          ref={setSliderListRef}\n          scrollMode={scrollMode}\n          animation={animation}\n          slideCount={slideCount}\n          slidesToScroll={slidesToScroll}\n          slidesToShow={slidesToShow}\n          speed={speed}\n          slideWidth={slideWidth}\n          wrapAround={wrapAround}\n          setIsAnimating={setIsAnimating}\n        >\n          {wrapAround ? renderSlides('prev-cloned') : null}\n          {renderSlides()}\n          {wrapAround ? renderSlides('next-cloned') : null}\n        </SliderList>\n      </div>\n    </div>\n  );\n};\n\nCarousel.defaultProps = defaultProps;\n\nexport default Carousel;\n","import React, {\n  CSSProperties,\n  ReactNode,\n  useRef,\n  useEffect,\n  RefObject,\n} from 'react';\nimport { useSlideIntersectionObserver } from './hooks/use-slide-intersection-observer';\n\nconst getSlideWidth = (count: number, wrapAround?: boolean): string =>\n  `${wrapAround ? 100 / (3 * count) : 100 / count}%`;\n\nconst getSlideStyles = (\n  count: number,\n  isCurrentSlide: boolean,\n  isVisibleSlide: boolean,\n  wrapAround: boolean,\n  cellSpacing: number,\n  animation: 'zoom' | 'fade' | undefined,\n  speed: number,\n  zoomScale: number | undefined,\n  adaptiveHeight: boolean,\n  initializedAdaptiveHeight: boolean,\n  slideWidth: CSSProperties['width']\n): CSSProperties => {\n  const width = slideWidth ?? getSlideWidth(count, wrapAround);\n  // const width = getSlideWidth(count, wrapAround);\n  const visibleSlideOpacity = isVisibleSlide ? 1 : 0;\n  const animationSpeed = animation === 'fade' ? 200 : 500;\n\n  let height = 'auto';\n  if (adaptiveHeight) {\n    if (initializedAdaptiveHeight) {\n      // Once adaptiveHeight is initialized, the frame will size to the height\n      // of all the visible slides\n      height = '100%';\n    } else if (isVisibleSlide) {\n      // If the slide is visible but we're still measuring heights, have\n      // visible slides just take up their natural height\n      height = 'auto';\n    } else {\n      // If the slide is not visible and we're still measuring heights, the\n      // slide should have height 0 so it doesn't contribute to the measured\n      // height of the frame\n      height = '0';\n    }\n  }\n\n  return {\n    width,\n    height,\n    padding: `0 ${cellSpacing ? cellSpacing / 2 : 0}px`,\n    transition: animation ? `${speed || animationSpeed}ms ease 0s` : undefined,\n    transform:\n      animation === 'zoom'\n        ? `scale(${isCurrentSlide && isVisibleSlide ? 1 : zoomScale || 0.85})`\n        : undefined,\n    opacity: animation === 'fade' ? visibleSlideOpacity : 1,\n  };\n};\n\nconst generateIndex = (\n  index: number,\n  count: number,\n  typeOfSlide?: 'prev-cloned' | 'next-cloned'\n): number => {\n  if (typeOfSlide === 'prev-cloned') {\n    return index - count;\n  }\n\n  if (typeOfSlide === 'next-cloned') {\n    return index + count;\n  }\n\n  return index;\n};\n\nconst Slide = ({\n  count,\n  children,\n  index,\n  isCurrentSlide,\n  typeOfSlide,\n  wrapAround,\n  cellSpacing,\n  slideWidth,\n  animation,\n  speed,\n  zoomScale,\n  onVisibleSlideHeightChange,\n  adaptiveHeight,\n  initializedAdaptiveHeight,\n  updateIOEntry,\n  id,\n  carouselRef,\n}: {\n  count: number;\n  id: string;\n  children: ReactNode | ReactNode[];\n  index: number;\n  isCurrentSlide: boolean;\n  typeOfSlide: 'prev-cloned' | 'next-cloned' | undefined;\n  wrapAround: boolean;\n  cellSpacing: number;\n  animation: 'zoom' | 'fade' | undefined;\n  speed: number;\n  zoomScale: number | undefined;\n  slideWidth?: CSSProperties['width'];\n  updateIOEntry: (id: string, isFullyVisible: boolean) => void;\n  carouselRef: RefObject<Element>;\n  /**\n   * Called with `height` when slide becomes visible and `null` when it becomes\n   * hidden.\n   */\n  onVisibleSlideHeightChange: (index: number, height: number | null) => unknown;\n  adaptiveHeight: boolean;\n  initializedAdaptiveHeight: boolean;\n}): JSX.Element => {\n  const customIndex = wrapAround\n    ? generateIndex(index, count, typeOfSlide)\n    : index;\n\n  const slideRef = useRef<HTMLDivElement>(null);\n\n  const entry = useSlideIntersectionObserver(slideRef, carouselRef, (entry) => {\n    updateIOEntry(id, entry?.intersectionRatio >= 0.95);\n  });\n\n  const isVisible = !!entry?.isIntersecting;\n  const isFullyVisible = (entry?.intersectionRatio ?? 1) >= 0.95;\n\n  const prevIsVisibleRef = useRef(false);\n  useEffect(() => {\n    const node = slideRef.current;\n    if (node) {\n      const slideHeight = node.getBoundingClientRect()?.height;\n\n      const prevIsVisible = prevIsVisibleRef.current;\n      if (isVisible && !prevIsVisible) {\n        onVisibleSlideHeightChange(customIndex, slideHeight);\n      } else if (!isVisible && prevIsVisible) {\n        onVisibleSlideHeightChange(customIndex, null);\n      }\n\n      prevIsVisibleRef.current = isVisible;\n    }\n  }, [customIndex, isVisible, onVisibleSlideHeightChange]);\n\n  const currentSlideClass =\n    isCurrentSlide && isFullyVisible ? ' slide-current' : '';\n\n  return (\n    <div\n      ref={slideRef}\n      {...{ inert: isFullyVisible ? undefined : 'true' }}\n      className={`slide${currentSlideClass}${\n        typeOfSlide ? ` ${typeOfSlide}` : ''\n      }${isFullyVisible ? ' slide-visible' : ''}`}\n      style={getSlideStyles(\n        count,\n        isCurrentSlide,\n        isFullyVisible,\n        wrapAround,\n        cellSpacing,\n        animation,\n        speed,\n        zoomScale,\n        adaptiveHeight,\n        initializedAdaptiveHeight,\n        slideWidth\n      )}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport default Slide;\n","import { RefObject, useEffect, useRef, useState } from 'react';\n\nexport const useSlideIntersectionObserver = (\n  elementRef: RefObject<Element>,\n  rootRef: RefObject<Element>,\n  callback: (entry: IntersectionObserverEntry) => void\n) => {\n  const [entry, setEntry] = useState<IntersectionObserverEntry>();\n  const callbackRef = useRef(callback);\n\n  useEffect(() => {\n    callbackRef.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    const node = elementRef?.current;\n    const root = rootRef?.current;\n\n    if (!window.IntersectionObserver || !node || !root) return;\n\n    const observer = new IntersectionObserver(\n      (entries) => {\n        entries.forEach((entry) => {\n          setEntry(entry);\n          callbackRef.current(entry);\n        });\n      },\n      {\n        threshold: [0.05, 0.95],\n        root,\n      }\n    );\n\n    observer.observe(node);\n\n    return () => observer.disconnect();\n  }, [elementRef, rootRef]);\n\n  return entry;\n};\n","import React, { AriaAttributes, CSSProperties } from 'react';\n\nconst styles: CSSProperties = {\n  position: 'absolute',\n  width: '1px',\n  height: '1px',\n  overflow: 'hidden',\n  padding: 0,\n  margin: '-1px',\n  clip: 'rect(0, 0, 0, 0)',\n  whiteSpace: 'nowrap',\n  border: 0,\n};\n\nconst AnnounceSlide = ({\n  message,\n  ariaLive = 'polite',\n}: {\n  message: string;\n  ariaLive: AriaAttributes['aria-live'];\n}): React.ReactElement => (\n  <div aria-live={ariaLive} aria-atomic=\"true\" style={styles} tabIndex={-1}>\n    {message}\n  </div>\n);\n\nexport const defaultRenderAnnounceSlideMessage = ({\n  currentSlide,\n  count,\n}: {\n  currentSlide: number;\n  count: number;\n}): string => `Slide ${currentSlide + 1} of ${count}`;\n\nexport default AnnounceSlide;\n","import React, { ReactNode, useEffect } from 'react';\nimport { getDotIndexes } from './default-controls';\nimport { useTween } from './hooks/use-tween';\nimport { CellAlign, InternalCarouselProps } from './types';\n\nexport const getPercentOffsetForSlide = (\n  currentSlide: number,\n  slideCount: number,\n  slidesToShow: number,\n  cellAlign: CellAlign,\n  wrapAround: boolean\n): number => {\n  // When wrapAround is enabled, we show the slides 3 times\n  const renderedSlideCount = wrapAround ? 3 * slideCount : slideCount;\n\n  const singleSlidePercentOfWhole = 100 / renderedSlideCount;\n\n  // When wrap is on, -33.33% puts us right on the center, true set of slides\n  // (the left and right sets are clones meant to avoid visual gaps)\n  let slide0Offset = wrapAround ? -100 / 3 : 0;\n\n  if (cellAlign === 'right' && slidesToShow > 1) {\n    const excessSlides = slidesToShow - 1;\n    slide0Offset += singleSlidePercentOfWhole * excessSlides;\n  }\n\n  if (cellAlign === 'center' && slidesToShow > 1) {\n    const excessSlides = slidesToShow - 1;\n    // Half of excess is on left and half is on right when centered\n    const excessLeftSlides = excessSlides / 2;\n    slide0Offset += singleSlidePercentOfWhole * excessLeftSlides;\n  }\n\n  const currentSlideOffsetFrom0 = (100 / renderedSlideCount) * currentSlide;\n\n  return slide0Offset - currentSlideOffsetFrom0;\n};\n\ninterface SliderListProps\n  extends Pick<\n    InternalCarouselProps,\n    | 'cellAlign'\n    | 'disableAnimation'\n    | 'disableEdgeSwiping'\n    | 'easing'\n    | 'edgeEasing'\n    | 'scrollMode'\n    | 'animation'\n    | 'slidesToShow'\n    | 'slideWidth'\n    | 'speed'\n    | 'wrapAround'\n  > {\n  slidesToScroll: number;\n  animationDistance: number;\n  children: ReactNode;\n  currentSlide: number;\n  draggedOffset: number;\n  isDragging: boolean;\n  slideCount: number;\n  setIsAnimating: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nexport const SliderList = React.forwardRef<HTMLDivElement, SliderListProps>(\n  (\n    {\n      animation,\n      animationDistance,\n      cellAlign,\n      children,\n      currentSlide,\n      disableAnimation,\n      disableEdgeSwiping,\n      draggedOffset,\n      easing,\n      edgeEasing,\n      isDragging,\n      scrollMode,\n      slideCount,\n      slidesToScroll,\n      slidesToShow,\n      speed,\n      wrapAround,\n      slideWidth,\n      setIsAnimating,\n    },\n    forwardedRef\n  ) => {\n    // When wrapAround is enabled, we show the slides 3 times\n    const renderedSlideCount = wrapAround ? 3 * slideCount : slideCount;\n\n    const listVisibleWidth = slideWidth\n      ? `calc(${slideWidth} * ${renderedSlideCount})`\n      : `${(renderedSlideCount * 100) / slidesToShow}%`;\n\n    const percentOffsetForSlideProps = [\n      slideCount,\n      slidesToShow,\n      cellAlign,\n      wrapAround,\n    ] as const;\n\n    // We recycle dot index generation to determine the leftmost and rightmost\n    // indices used, to be used in calculating the x-translation values we need\n    // to limit to or when edgeEasing should be used.\n    const dotIndexes = getDotIndexes(\n      slideCount,\n      slidesToScroll,\n      scrollMode,\n      slidesToShow,\n      wrapAround,\n      cellAlign\n    );\n\n    let clampedDraggedOffset = `${draggedOffset}px`;\n    if (isDragging && disableEdgeSwiping && !wrapAround) {\n      const clampOffsets = [\n        dotIndexes[0],\n        dotIndexes[dotIndexes.length - 1],\n      ].map((index) =>\n        getPercentOffsetForSlide(index, ...percentOffsetForSlideProps)\n      );\n      // Offsets are seemingly backwards because the rightmost slide creates\n      // the most negative translate value\n      clampedDraggedOffset = `clamp(${clampOffsets[1]}%, ${draggedOffset}px, ${clampOffsets[0]}%)`;\n    }\n\n    const slideBasedOffset = getPercentOffsetForSlide(\n      currentSlide,\n      ...percentOffsetForSlideProps\n    );\n\n    const isEdgeEasing =\n      !disableEdgeSwiping &&\n      !wrapAround &&\n      ((currentSlide === dotIndexes[0] && animationDistance < 0) ||\n        (currentSlide === dotIndexes[dotIndexes.length - 1] &&\n          animationDistance > 0));\n    const { value: transition, isAnimating } = useTween(\n      speed,\n      !isEdgeEasing ? easing : edgeEasing,\n      // animationDistance is assumed to be unique enough that it can be used to\n      // detect when a new animation should start. This is used in addition to\n      // currentSlide because some animations, such as those with edgeEasing, do\n      // not occur due to a change in value of currentSlide\n      currentSlide + animationDistance,\n      isDragging || disableAnimation || animation === 'fade'\n    );\n\n    // Return undefined if the transform would be 0 pixels since transforms can\n    // cause flickering in chrome.\n    let positioning: string | undefined;\n    if (isDragging || slideBasedOffset !== 0 || isAnimating) {\n      if (isDragging) {\n        positioning = `translateX(${clampedDraggedOffset})`;\n      } else {\n        const transitionOffset = isAnimating\n          ? (1 - transition) * animationDistance\n          : 0;\n        positioning = `translateX(calc(${slideBasedOffset}% - ${transitionOffset}px))`;\n      }\n    }\n\n    useEffect(() => {\n      setIsAnimating(isAnimating);\n    }, [isAnimating, setIsAnimating]);\n\n    return (\n      <div\n        ref={forwardedRef}\n        className=\"slider-list\"\n        style={{\n          width: listVisibleWidth,\n          textAlign: 'left',\n          userSelect: 'auto',\n          transform: positioning,\n          display: 'flex',\n        }}\n      >\n        {children}\n      </div>\n    );\n  }\n);\n\nSliderList.displayName = 'SliderList';\n","import React, { CSSProperties, useCallback } from 'react';\nimport { CellAlign, ControlProps, ScrollMode } from './types';\nimport { getBoundedIndex } from './utils';\n\nconst defaultButtonStyles = (disabled: boolean): CSSProperties => ({\n  border: 0,\n  background: 'rgba(0,0,0,0.4)',\n  color: 'white',\n  padding: 10,\n  textTransform: 'uppercase',\n  opacity: disabled ? 0.3 : 1,\n  cursor: disabled ? 'not-allowed' : 'pointer',\n});\n\nexport const prevButtonDisabled = ({\n  cellAlign,\n  currentSlide,\n  slidesToShow,\n  wrapAround,\n}: Pick<\n  ControlProps,\n  'cellAlign' | 'currentSlide' | 'slidesToShow' | 'wrapAround'\n>) => {\n  // inifite carousel\n  if (wrapAround) {\n    return false;\n  }\n\n  // disable if displaying the leftmost slide\n  if (currentSlide === 0) {\n    return true;\n  }\n\n  // remainder scroll mode\n  if (cellAlign === 'right' && currentSlide <= slidesToShow - 1) {\n    return true;\n  }\n\n  return false;\n};\n\nexport const PreviousButton = ({\n  previousSlide,\n  defaultControlsConfig: {\n    prevButtonClassName,\n    prevButtonStyle = {},\n    prevButtonText,\n    prevButtonOnClick,\n  },\n  onUserNavigation,\n  previousDisabled: disabled,\n}: ControlProps) => {\n  const handleClick = (event: React.MouseEvent<HTMLElement>) => {\n    prevButtonOnClick?.(event);\n    if (event.defaultPrevented) return;\n\n    onUserNavigation(event);\n\n    event.preventDefault();\n    previousSlide();\n  };\n\n  return (\n    <button\n      className={prevButtonClassName}\n      style={{\n        ...defaultButtonStyles(disabled),\n        ...prevButtonStyle,\n      }}\n      disabled={disabled}\n      onClick={handleClick}\n      aria-label=\"previous\"\n      type=\"button\"\n    >\n      {prevButtonText || 'Prev'}\n    </button>\n  );\n};\n\nexport const nextButtonDisabled = ({\n  cellAlign,\n  currentSlide,\n  slideCount,\n  slidesToShow,\n  wrapAround,\n}: Pick<\n  ControlProps,\n  'cellAlign' | 'currentSlide' | 'slideCount' | 'slidesToShow' | 'wrapAround'\n>) => {\n  // inifite carousel\n  if (wrapAround) {\n    return false;\n  }\n\n  // If we are at the last possible slide without wrap, disable\n  if (currentSlide >= slideCount - 1) {\n    return true;\n  }\n\n  // remainder scroll mode\n  if (cellAlign === 'left' && currentSlide >= slideCount - slidesToShow) {\n    return true;\n  }\n\n  return false;\n};\n\nexport const NextButton = ({\n  nextSlide,\n  defaultControlsConfig: {\n    nextButtonClassName,\n    nextButtonStyle = {},\n    nextButtonText,\n    nextButtonOnClick,\n  },\n  nextDisabled: disabled,\n  onUserNavigation,\n}: ControlProps) => {\n  const handleClick = (event: React.MouseEvent<HTMLElement>) => {\n    nextButtonOnClick?.(event);\n    if (event.defaultPrevented) return;\n\n    onUserNavigation(event);\n\n    event.preventDefault();\n    nextSlide();\n  };\n\n  return (\n    <button\n      className={nextButtonClassName}\n      style={{\n        ...defaultButtonStyles(disabled),\n        ...nextButtonStyle,\n      }}\n      disabled={disabled}\n      onClick={handleClick}\n      aria-label=\"next\"\n      type=\"button\"\n    >\n      {nextButtonText || 'Next'}\n    </button>\n  );\n};\n\n/**\n * Calculate the indices that each dot will jump to when clicked\n */\nexport const getDotIndexes = (\n  slideCount: number,\n  slidesToScroll: number,\n  scrollMode: ScrollMode,\n  slidesToShow: number,\n  wrapAround: boolean,\n  cellAlign: CellAlign\n) => {\n  const dotIndexes: number[] = [];\n  const scrollSlides = slidesToScroll <= 0 ? 1 : slidesToScroll;\n\n  if (wrapAround) {\n    for (let i = 0; i < slideCount; i += scrollSlides) {\n      dotIndexes.push(i);\n    }\n\n    return dotIndexes;\n  }\n\n  if (cellAlign === 'center') {\n    for (let i = 0; i < slideCount - 1; i += scrollSlides) {\n      dotIndexes.push(i);\n    }\n\n    if (slideCount > 0) {\n      dotIndexes.push(slideCount - 1);\n    }\n\n    return dotIndexes;\n  }\n\n  if (cellAlign === 'left') {\n    if (slidesToShow >= slideCount) {\n      return [0];\n    }\n\n    const lastPossibleIndexWithoutWhitespace = slideCount - slidesToShow;\n\n    for (let i = 0; i < lastPossibleIndexWithoutWhitespace; i += scrollSlides) {\n      dotIndexes.push(i);\n    }\n\n    if (scrollMode === ScrollMode.remainder) {\n      dotIndexes.push(lastPossibleIndexWithoutWhitespace);\n    } else {\n      dotIndexes.push(dotIndexes[dotIndexes.length - 1] + scrollSlides);\n    }\n\n    return dotIndexes;\n  }\n\n  if (cellAlign === 'right') {\n    if (slidesToShow >= slideCount) {\n      return [slideCount - 1];\n    }\n\n    const firstPossibleIndexWithoutWhitespace = slidesToShow - 1;\n\n    if (scrollMode === ScrollMode.remainder) {\n      for (\n        let i = firstPossibleIndexWithoutWhitespace;\n        i < slideCount - 1;\n        i += scrollSlides\n      ) {\n        dotIndexes.push(i);\n      }\n      dotIndexes.push(slideCount - 1);\n    } else {\n      for (\n        let i = slideCount - 1;\n        i > firstPossibleIndexWithoutWhitespace;\n        i -= scrollSlides\n      ) {\n        dotIndexes.push(i);\n      }\n      dotIndexes.push(dotIndexes[dotIndexes.length - 1] - scrollSlides);\n\n      dotIndexes.reverse();\n    }\n\n    return dotIndexes;\n  }\n\n  // We should never reach this, because the if statements above cover all\n  // possible values of cellAlign\n  return dotIndexes;\n};\n\nexport const PagingDots = ({\n  pagingDotsIndices,\n  defaultControlsConfig: {\n    pagingDotsContainerClassName,\n    pagingDotsClassName,\n    pagingDotsStyle = {},\n    pagingDotsOnClick,\n  },\n  currentSlide,\n  onUserNavigation,\n  slideCount,\n  goToSlide,\n}: ControlProps) => {\n  const listStyles: CSSProperties = {\n    position: 'relative',\n    top: -10,\n    display: 'flex',\n    margin: 0,\n    padding: 0,\n    listStyleType: 'none',\n  };\n\n  const getButtonStyles = useCallback(\n    (active: boolean) => ({\n      cursor: 'pointer',\n      opacity: active ? 1 : 0.5,\n      background: 'transparent',\n      border: 'none',\n      fill: 'black',\n    }),\n    []\n  );\n  const currentSlideBounded = getBoundedIndex(currentSlide, slideCount);\n\n  return (\n    <ul className={pagingDotsContainerClassName} style={listStyles}>\n      {pagingDotsIndices.map((slideIndex, i) => {\n        const isActive =\n          currentSlideBounded === slideIndex ||\n          // sets navigation dots active if the current slide falls in the current index range\n          (currentSlideBounded < slideIndex &&\n            (i === 0 || currentSlideBounded > pagingDotsIndices[i - 1]));\n\n        return (\n          <li\n            key={slideIndex}\n            className={isActive ? 'paging-item active' : 'paging-item'}\n          >\n            <button\n              className={pagingDotsClassName}\n              type=\"button\"\n              style={{\n                ...getButtonStyles(isActive),\n                ...pagingDotsStyle,\n              }}\n              onClick={(event) => {\n                pagingDotsOnClick?.(event);\n                if (event.defaultPrevented) return;\n\n                onUserNavigation(event);\n\n                goToSlide(slideIndex);\n              }}\n              aria-label={`slide ${slideIndex + 1} bullet`}\n              aria-selected={isActive}\n            >\n              <svg\n                className=\"paging-dot\"\n                width=\"6\"\n                height=\"6\"\n                aria-hidden=\"true\"\n                focusable=\"false\"\n                viewBox=\"0 0 6 6\"\n              >\n                <circle cx=\"3\" cy=\"3\" r=\"3\" />\n              </svg>\n            </button>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n","import { ReactNode, CSSProperties, MutableRefObject } from 'react';\n\nexport type CellAlign = 'center' | 'right' | 'left';\n\n/** @deprecated use string literals for the values instead */\nexport enum Alignment {\n  Center = 'center',\n  Right = 'right',\n  Left = 'left',\n}\n\nexport enum Directions {\n  Next = 'next',\n  Prev = 'prev',\n  Up = 'up',\n  Down = 'down',\n}\n\nexport enum Positions {\n  TopLeft = 'TopLeft',\n  TopCenter = 'TopCenter',\n  TopRight = 'TopRight',\n  CenterLeft = 'CenterLeft',\n  CenterCenter = 'CenterCenter',\n  CenterRight = 'CenterRight',\n  BottomLeft = 'BottomLeft',\n  BottomCenter = 'BottomCenter',\n  BottomRight = 'BottomRight',\n}\n\ntype SlideChildren = {\n  offsetHeight: number;\n};\n\nexport type SlideHeight = {\n  height: number;\n  slideIndex: number;\n};\n\nexport interface Slide {\n  children?: [SlideChildren];\n  offsetHeight: number;\n}\n\nexport enum ScrollMode {\n  page = 'page',\n  remainder = 'remainder',\n}\n\ninterface DefaultControlsConfig {\n  containerClassName?: string;\n  nextButtonClassName?: string;\n  nextButtonOnClick?: React.MouseEventHandler;\n  nextButtonStyle?: CSSProperties;\n  nextButtonText?: ReactNode;\n  pagingDotsClassName?: string;\n  pagingDotsContainerClassName?: string;\n  pagingDotsOnClick?: React.MouseEventHandler;\n  pagingDotsStyle?: CSSProperties;\n  prevButtonClassName?: string;\n  prevButtonOnClick?: React.MouseEventHandler;\n  prevButtonStyle?: CSSProperties;\n  prevButtonText?: ReactNode;\n}\n\nexport interface KeyCodeConfig {\n  firstSlide?: number[];\n  lastSlide?: number[];\n  nextSlide?: number[];\n  pause?: number[];\n  previousSlide?: number[];\n}\n\nexport type KeyCodeFunction =\n  | 'nextSlide'\n  | 'previousSlide'\n  | 'firstSlide'\n  | 'lastSlide'\n  | 'pause'\n  | null;\n\nexport interface KeyCodeMap {\n  [key: number]: keyof KeyCodeConfig;\n}\n\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/** @deprecated This is not actually used for anything */\nexport interface CarouselState {}\n/* eslint-enable @typescript-eslint/no-empty-interface */\n\ntype RenderAnnounceSlideMessage = (props: {\n  currentSlide: number;\n  count: number;\n}) => string;\n\nexport interface ControlProps\n  extends Pick<\n    InternalCarouselProps,\n    | 'cellAlign'\n    | 'cellSpacing'\n    | 'defaultControlsConfig'\n    | 'onUserNavigation'\n    | 'scrollMode'\n    | 'slidesToScroll'\n    | 'slidesToShow'\n    | 'vertical'\n    | 'wrapAround'\n  > {\n  /**\n   * Current slide index\n   */\n  currentSlide: number;\n\n  /**\n   * The indices for the paging dots\n   */\n  pagingDotsIndices: number[];\n\n  /**\n   * Go to a specific slide\n   * @param targetIndex Index to go to\n   */\n  goToSlide: (targetIndex: number) => void;\n\n  /**\n   * Whether the \"next\" button should be disabled or not\n   */\n  nextDisabled: boolean;\n\n  /**\n   * Go to the next slide\n   */\n  nextSlide: () => void;\n\n  /**\n   * Whether the \"previous\" button should be disabled or not\n   */\n  previousDisabled: boolean;\n\n  /**\n   * Go to the previous slide\n   */\n  previousSlide: () => void;\n\n  /**\n   * Total number of slides\n   */\n  slideCount: number;\n}\n\nexport type RenderControlFunctionNames =\n  | 'renderTopLeftControls'\n  | 'renderTopCenterControls'\n  | 'renderTopRightControls'\n  | 'renderCenterLeftControls'\n  | 'renderCenterCenterControls'\n  | 'renderCenterRightControls'\n  | 'renderBottomLeftControls'\n  | 'renderBottomCenterControls'\n  | 'renderBottomRightControls';\n\n/**\n * A function to override what to render on an edge/corner of the modal.\n *\n * Pass in null to not render the default controls on an edge.\n */\ntype RenderControls = ((props: ControlProps) => ReactNode) | null;\n\n/**\n * Animation easing function accepting a normalized time between 0 and 1,\n * inclusive, and returning an eased time, which equals 0 at normalizedTime==0\n * and equals 1 at normalizedTime==1\n */\nexport type EasingFunction = (normalizedTime: number) => number;\n\nexport interface InternalCarouselProps {\n  /**\n   * If it's set to true, the carousel will adapt its height to the visible slides.\n   */\n  adaptiveHeight: boolean;\n\n  /**\n   * Whether to smoothly transition the height of the frame when using\n   * `adaptiveHeight`.\n   * @default true\n   */\n  adaptiveHeightAnimation: boolean;\n\n  /**\n   * Hook to be called after a slide is changed\n   * @param index Index of the current slide\n   */\n  afterSlide: (index: number) => void;\n\n  /**\n   * Adds a zoom or fade effect on the currently visible slide.\n   */\n  animation?: 'zoom' | 'fade';\n\n  /**\n   * Autoplay mode active\n   * @default false\n   */\n  autoplay: boolean;\n\n  /**\n   * Interval for autoplay iteration (ms)\n   * @default 3000\n   */\n  autoplayInterval: number;\n\n  /**\n   * Autoplay cycles through slide indexes in reverse\n   * @default false\n   */\n  autoplayReverse: boolean;\n\n  /**\n   * Hook to be called before a slide is changed\n   * @param currentSlide Index of the current slide\n   * @param endSlide Index of the last slide\n   */\n  beforeSlide: (currentSlideIndex: number, endSlideIndex: number) => void;\n\n  /**\n   * When displaying more than one slide,\n   * sets which position to anchor the current slide to\n   */\n  cellAlign: CellAlign;\n\n  /**\n   * Space between slides, as an integer, but reflected as px\n   */\n  cellSpacing: number;\n\n  /**\n   * Explicit children prop to resolve issue with @types/react v18\n   */\n  children: ReactNode | ReactNode[];\n\n  /**\n   * Additional className\n   */\n  className?: string;\n\n  /**\n   * This prop lets you apply custom classes and styles to the default Next, Previous, and Paging Dots controls\n   */\n  defaultControlsConfig: DefaultControlsConfig;\n\n  /**\n   * Disable slides animation\n   * @default false\n   */\n  disableAnimation: boolean;\n\n  /**\n   * Disable swipe before first slide and after last slide\n   * @default false\n   */\n  disableEdgeSwiping: boolean;\n\n  /**\n   * Enable mouse swipe/dragging\n   */\n  dragging: boolean;\n\n  /**\n   * The percentage (from 0 to 1) of a slide that the user needs to drag before\n   * @default `0.5`\n   */\n  dragThreshold: number;\n\n  /**\n   * Animation easing function\n   */\n  easing: EasingFunction;\n\n  /**\n   * Animation easing function when swipe exceeds edge\n   */\n  edgeEasing: EasingFunction;\n\n  /**\n   * When set to true, disable keyboard controls\n   * @default false\n   */\n  enableKeyboardControls: boolean;\n\n  /**\n   * Customize the aria-label of the frame container of the carousel. This is useful when you have more than one carousel on the page.\n   */\n  frameAriaLabel?: string;\n\n  /**\n   * Ref to pass to carousel element\n   */\n  innerRef?: MutableRefObject<HTMLDivElement>;\n\n  /**\n   * When enableKeyboardControls is enabled, Configure keyCodes for corresponding slide actions as array of keyCodes\n   */\n  keyCodeConfig: KeyCodeConfig;\n\n  /**\n   * optional callback function\n   */\n  onDragStart: (\n    e: React.TouchEvent<HTMLDivElement> | React.MouseEvent<HTMLDivElement>\n  ) => void;\n\n  /**\n   * optional callback function\n   */\n  onDrag: (\n    e: React.TouchEvent<HTMLDivElement> | React.MouseEvent<HTMLDivElement>\n  ) => void;\n\n  /**\n   * optional callback function\n   */\n  onDragEnd: (\n    e: React.TouchEvent<HTMLDivElement> | React.MouseEvent<HTMLDivElement>\n  ) => void;\n\n  /**\n   * Callback called when user-triggered navigation occurs: dragging/swiping,\n   * clicking one of the controls (custom controls not included), or using a\n   * keyboard shortcut\n   */\n  onUserNavigation: (\n    e: React.TouchEvent | React.MouseEvent | React.KeyboardEvent\n  ) => void;\n\n  /**\n   * Pause autoPlay when mouse is over carousel\n   * @default true\n   */\n  pauseOnHover: boolean;\n\n  /**\n   * Function for rendering aria-live announcement messages\n   */\n  renderAnnounceSlideMessage: RenderAnnounceSlideMessage;\n\n  /**\n   * Function for rendering bottom center control\n   */\n  renderBottomCenterControls: RenderControls;\n\n  /**\n   * Function for rendering bottom left control\n   */\n  renderBottomLeftControls?: RenderControls;\n\n  /**\n   * Function for rendering bottom right control\n   */\n  renderBottomRightControls?: RenderControls;\n\n  /**\n   * Function for rendering center center control\n   */\n  renderCenterCenterControls?: RenderControls;\n\n  /**\n   * Function for rendering center left control\n   */\n  renderCenterLeftControls: RenderControls;\n\n  /**\n   * Function for rendering center right control\n   */\n  renderCenterRightControls: RenderControls;\n\n  /**\n   * Function for rendering top center control\n   */\n  renderTopCenterControls?: RenderControls;\n\n  /**\n   * Function for rendering top left control\n   */\n  renderTopLeftControls?: RenderControls;\n\n  /**\n   * Function for rendering top right control\n   */\n  renderTopRightControls?: RenderControls;\n\n  /**\n   * Supports 'page' and 'remainder' scroll modes.\n   */\n  scrollMode: ScrollMode;\n\n  /**\n   * Manually set the index of the initial slide to be shown\n   */\n  slideIndex?: number;\n\n  /**\n   * Slides to scroll at once.\n   */\n  slidesToScroll: number | 'auto';\n\n  /**\n   * Slides to show at once\n   */\n  slidesToShow: number;\n\n  /**\n   * Sets a fixed slide width\n   */\n  slideWidth?: CSSProperties['width'];\n\n  /**\n   * Animation duration\n   */\n  speed: number;\n\n  /**\n   * style object\n   */\n  style: CSSProperties;\n\n  /**\n   * Enable touch swipe/dragging\n   */\n  swiping: boolean;\n\n  /**\n   * Not migrated yet\n   *\n   * Enable the slides to transition vertically\n   */\n  vertical: boolean;\n\n  /**\n   * Used to remove all controls at once. Overwrites the render[Top, Right, Bottom, Left]CenterControls()\n   * @default false\n   */\n  withoutControls: boolean;\n\n  /**\n   * Sets infinite wrapAround mode\n   * @default false\n   */\n  wrapAround: boolean;\n\n  /**\n   * Adds a number value to set the scale of zoom when animation === \"zoom\".\n   * The number value should be set in a range of (0,1).\n   * @default 0.85\n   */\n  zoomScale?: number;\n}\n\n/**\n * This component has no required props.\n */\nexport type CarouselProps = Partial<InternalCarouselProps>;\n","import { getDotIndexes } from './default-controls';\nimport { CellAlign, ScrollMode } from './types';\n\nexport const getNextMoveIndex = (\n  scrollMode: ScrollMode,\n  wrapAround: boolean,\n  currentSlide: number,\n  slideCount: number,\n  slidesToScroll: number,\n  slidesToShow: number,\n  cellAlign: CellAlign\n) => {\n  if (wrapAround) {\n    return currentSlide + slidesToScroll;\n  }\n  // Quit early if we're already as far right as we can go\n  if (\n    currentSlide >= slideCount - 1 ||\n    (cellAlign === 'left' && currentSlide >= slideCount - slidesToShow)\n  ) {\n    return currentSlide;\n  }\n\n  if (scrollMode === ScrollMode.remainder && cellAlign === 'left') {\n    return Math.min(currentSlide + slidesToScroll, slideCount - slidesToShow);\n  }\n\n  return Math.min(currentSlide + slidesToScroll, slideCount - 1);\n};\n\nexport const getPrevMoveIndex = (\n  scrollMode: ScrollMode,\n  wrapAround: boolean,\n  currentSlide: number,\n  slidesToScroll: number,\n  slidesToShow: number,\n  cellAlign: CellAlign\n) => {\n  if (wrapAround) {\n    return currentSlide - slidesToScroll;\n  }\n\n  // Quit early if we're already as far left as we can go\n  if (\n    currentSlide <= 0 ||\n    (cellAlign === 'right' && currentSlide <= slidesToShow - 1)\n  ) {\n    return currentSlide;\n  }\n\n  if (scrollMode === ScrollMode.remainder && cellAlign === 'right') {\n    return Math.max(currentSlide - slidesToScroll, slidesToShow - 1);\n  }\n\n  return Math.max(currentSlide - slidesToScroll, 0);\n};\n\nexport const getDefaultSlideIndex = (\n  slideIndex: number | undefined,\n  slideCount: number,\n  slidesToShow: number,\n  slidesToScroll: number,\n  cellAlign: CellAlign,\n  autoplayReverse: boolean,\n  scrollMode: ScrollMode\n) => {\n  if (slideIndex !== undefined) {\n    return slideIndex;\n  }\n\n  const dotIndexes = getDotIndexes(\n    slideCount,\n    slidesToScroll,\n    scrollMode,\n    slidesToShow,\n    false,\n    cellAlign\n  );\n\n  return autoplayReverse ? dotIndexes[dotIndexes.length - 1] : dotIndexes[0];\n};\n\n/**\n * Boils down an unbounded index (-Infinity < index < Infinity) to a bounded one\n * (0 ≤ index < slideCount)\n */\nexport const getBoundedIndex = (rawIndex: number, slideCount: number) => {\n  return ((rawIndex % slideCount) + slideCount) % slideCount;\n};\n","import { useEffect, useState, useRef } from 'react';\nimport { EasingFunction } from 'src/types';\n\n/**\n * Provides an interpolated value, beginning at 0 and ending at 1, based on a\n * provided duration and animation timing function.\n */\nexport const useTween = (\n  durationMs: number,\n  easingFunction: EasingFunction,\n  // navigationNum is an combination of numbers that are stable when the\n  // animation should not be running or should continue running, but change when\n  // the animation should start running. In practice, this is a combination of\n  // the animation distance and slide index.\n  navigationNum: number,\n  shouldInterrupt: boolean\n) => {\n  const [normalizedTimeRaw, setNormalizedTime] = useState(1);\n  const startTime = useRef(Date.now());\n  const rAF = useRef<number | undefined>();\n  const isFirstRender = useRef(true);\n  const lastNavigationNum = useRef<number | null>(null);\n\n  // Detect on the first render following navigation if the animation should\n  // be running. If we wait for the useEffect, the first render will flash with\n  // the slide in its destination position, before the animation triggers,\n  // sending it back to the position of the first frame of the animation. This\n  // approach is done in place of a useLayoutEffect, which has issues with SSR.\n  const normalizedTime =\n    lastNavigationNum.current === null ||\n    lastNavigationNum.current === navigationNum ||\n    shouldInterrupt\n      ? normalizedTimeRaw\n      : 0; // 0 here indicates the animation has begun\n\n  useEffect(() => {\n    lastNavigationNum.current = navigationNum;\n\n    // Skip the first render as we don't want to trigger the animation right off\n    // the bat\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n\n    if (shouldInterrupt) {\n      return;\n    }\n\n    startTime.current = Date.now();\n    setNormalizedTime(0);\n\n    const tick = () => {\n      rAF.current = requestAnimationFrame(() => {\n        const currentTime = Date.now();\n        const normalizedTime = Math.min(\n          1,\n          (currentTime - startTime.current) / durationMs\n        );\n        setNormalizedTime(normalizedTime);\n\n        if (normalizedTime < 1) {\n          tick();\n        } else {\n          // Clean up so we can use this value to determine if the most recent\n          // animation completed\n          rAF.current = undefined;\n        }\n      });\n    };\n    tick();\n\n    return () => {\n      // If the most recent animation did not complete, cut it short and reset\n      // the animation\n      if (rAF.current !== undefined) {\n        cancelAnimationFrame(rAF.current);\n        setNormalizedTime(1);\n      }\n    };\n  }, [navigationNum, durationMs, shouldInterrupt]);\n\n  return {\n    isAnimating: normalizedTime !== 1,\n    value: easingFunction(normalizedTime),\n  };\n};\n","import React, { Fragment } from 'react';\nimport { getControlContainerStyles } from './control-styles';\nimport {\n  getDotIndexes,\n  nextButtonDisabled,\n  prevButtonDisabled,\n} from './default-controls';\nimport {\n  InternalCarouselProps,\n  Positions,\n  RenderControlFunctionNames,\n} from './types';\n\ntype ControlMap = { funcName: RenderControlFunctionNames; key: Positions }[];\nconst controlsMap: ControlMap = [\n  { funcName: 'renderTopLeftControls', key: Positions.TopLeft },\n  { funcName: 'renderTopCenterControls', key: Positions.TopCenter },\n  { funcName: 'renderTopRightControls', key: Positions.TopRight },\n  { funcName: 'renderCenterLeftControls', key: Positions.CenterLeft },\n  { funcName: 'renderCenterCenterControls', key: Positions.CenterCenter },\n  { funcName: 'renderCenterRightControls', key: Positions.CenterRight },\n  { funcName: 'renderBottomLeftControls', key: Positions.BottomLeft },\n  { funcName: 'renderBottomCenterControls', key: Positions.BottomCenter },\n  { funcName: 'renderBottomRightControls', key: Positions.BottomRight },\n];\n\nconst renderControls = (\n  props: InternalCarouselProps,\n  slideCount: number,\n  currentSlide: number,\n  goToSlide: (targetSlideIndex: number) => void,\n  nextSlide: () => void,\n  prevSlide: () => void,\n  slidesToScroll: number\n): React.ReactElement[] | null => {\n  if (props.withoutControls) {\n    return null;\n  }\n\n  const disableCheckProps = {\n    ...props,\n    currentSlide,\n    slideCount,\n  };\n  const nextDisabled = nextButtonDisabled(disableCheckProps);\n  const previousDisabled = prevButtonDisabled(disableCheckProps);\n  const pagingDotsIndices = getDotIndexes(\n    slideCount,\n    slidesToScroll,\n    props.scrollMode,\n    props.slidesToShow,\n    props.wrapAround,\n    props.cellAlign\n  );\n\n  return controlsMap.map((control) => {\n    if (\n      !props[control.funcName] ||\n      typeof props[control.funcName] !== 'function'\n    ) {\n      return <Fragment key={control.funcName} />;\n    }\n    return (\n      <div\n        key={control.funcName}\n        style={{\n          ...getControlContainerStyles(control.key),\n          pointerEvents: 'none',\n        }}\n      >\n        <div\n          className={[\n            `slider-control-${control.key.toLowerCase()}`,\n            props.defaultControlsConfig.containerClassName || '',\n          ]\n            .join(' ')\n            .trim()}\n          // The container has `pointerEvents: 'none'` so we need to override\n          // that to make sure the controls are clickable.\n          style={{ pointerEvents: 'auto' }}\n        >\n          {props[control.funcName]?.({\n            cellAlign: props.cellAlign,\n            cellSpacing: props.cellSpacing,\n            currentSlide,\n            defaultControlsConfig: props.defaultControlsConfig || {},\n            pagingDotsIndices,\n            goToSlide,\n            nextDisabled,\n            nextSlide,\n            onUserNavigation: props.onUserNavigation,\n            previousDisabled,\n            previousSlide: prevSlide,\n            scrollMode: props.scrollMode,\n            slideCount,\n            slidesToScroll,\n            slidesToShow: props.slidesToShow || 1,\n            vertical: props.vertical,\n            wrapAround: props.wrapAround,\n          })}\n        </div>\n      </div>\n    );\n  });\n};\n\nexport default renderControls;\n","import { CSSProperties } from 'react';\nimport { Positions } from './types';\n\nconst commonStyles: CSSProperties = {\n  position: 'absolute',\n  display: 'flex',\n  zIndex: 1,\n  top: 0,\n  left: 0,\n  bottom: 0,\n  right: 0,\n};\n\n/**\n * Gets flexbox alignment and justify-content styles for a given position.\n */\nconst getControlContainerFlexStyles = (pos: Positions): CSSProperties => {\n  let alignItems: CSSProperties['alignItems'];\n\n  switch (pos) {\n    case Positions.TopLeft:\n    case Positions.TopCenter:\n    case Positions.TopRight:\n      alignItems = 'flex-start';\n      break;\n    case Positions.CenterLeft:\n    case Positions.CenterCenter:\n    case Positions.CenterRight:\n      alignItems = 'center';\n      break;\n    case Positions.BottomLeft:\n    case Positions.BottomCenter:\n    case Positions.BottomRight:\n      alignItems = 'flex-end';\n      break;\n  }\n\n  let justifyContent: CSSProperties['justifyContent'];\n  switch (pos) {\n    case Positions.TopLeft:\n    case Positions.CenterLeft:\n    case Positions.BottomLeft:\n      justifyContent = 'flex-start';\n      break;\n    case Positions.TopCenter:\n    case Positions.CenterCenter:\n    case Positions.BottomCenter:\n      justifyContent = 'center';\n      break;\n    case Positions.TopRight:\n    case Positions.CenterRight:\n    case Positions.BottomRight:\n      justifyContent = 'flex-end';\n      break;\n  }\n\n  return { alignItems, justifyContent };\n};\n\n/**\n * Gets the styles for a back/forward control container to align the control\n * properly within the parent.\n */\nexport const getControlContainerStyles = (pos: Positions): CSSProperties => {\n  return { ...getControlContainerFlexStyles(pos), ...commonStyles };\n};\n","import React from 'react';\nimport { InternalCarouselProps, ControlProps, ScrollMode } from './types';\nimport { NextButton, PagingDots, PreviousButton } from './default-controls';\nimport { defaultRenderAnnounceSlideMessage } from './announce-slide';\n\nconst easeOut = (t: number) => (t - 1) ** 3 + 1;\n\nconst defaultProps: InternalCarouselProps = {\n  adaptiveHeight: false,\n  adaptiveHeightAnimation: true,\n  afterSlide: () => {\n    // do nothing\n  },\n  autoplay: false,\n  autoplayInterval: 3000,\n  autoplayReverse: false,\n  beforeSlide: () => {\n    // do nothing\n  },\n  cellAlign: 'left',\n  cellSpacing: 0,\n  defaultControlsConfig: {},\n  disableAnimation: false,\n  disableEdgeSwiping: false,\n  dragging: true,\n  dragThreshold: 0.5,\n  easing: easeOut,\n  edgeEasing: easeOut,\n  enableKeyboardControls: false,\n  frameAriaLabel: 'carousel-slider',\n  keyCodeConfig: {\n    nextSlide: [39, 68, 38, 87],\n    previousSlide: [37, 65, 40, 83],\n    firstSlide: [81],\n    lastSlide: [69],\n    pause: [32],\n  },\n  onDragStart: () => {\n    // do nothing\n  },\n  onDrag: () => {\n    // do nothing\n  },\n  onDragEnd: () => {\n    // do nothing\n  },\n  onUserNavigation: () => {\n    // do nothing\n  },\n  pauseOnHover: true,\n  renderAnnounceSlideMessage: defaultRenderAnnounceSlideMessage,\n  renderBottomCenterControls: (props: ControlProps) => (\n    <PagingDots {...props} />\n  ),\n  renderCenterLeftControls: (props: ControlProps) => (\n    <PreviousButton {...props} />\n  ),\n  renderCenterRightControls: (props: ControlProps) => <NextButton {...props} />,\n  scrollMode: ScrollMode.page,\n  slidesToScroll: 1,\n  slidesToShow: 1,\n  speed: 500,\n  style: {},\n  swiping: true,\n  vertical: false,\n  withoutControls: false,\n  wrapAround: false,\n  children: <></>,\n};\n\nexport default defaultProps;\n","import { SlideHeight } from '../types';\nimport { useCallback, useMemo, useState } from 'react';\nimport { useStateWithRef } from './use-state-with-ref';\n\n/**\n * The frame height is normally, just `auto` (i.e., it expands to fit the\n * items), but in adaptiveHeight mode, it's the height of the tallest visible\n * item.\n *\n * In adaptiveHeight mode, we also switch between two states to ensure that\n * slides don't render with zero height when server-side-rendering:\n *\n * - When initializedAdaptiveHeight is false: the frame has height auto; visible\n *   slides have height auto; invisible slides have height 0\n * - The client sets initializedAdaptiveHeight to true once we've measured all\n *   the visible slides' heights\n * - When initializedAdaptiveHeight is true: the frame has height set to the\n *   tallest visible slide; all slides have height 100%\n */\nexport const useFrameHeight = (\n  adaptiveHeight: boolean,\n  slidesToShow: number,\n  slideCount: number\n): {\n  /**\n   * Callback that can be passed to Slides to allow them to update the\n   * `visibleHeights` variable.\n   */\n  handleVisibleSlideHeightChange: (\n    slideIndex: number,\n    height: number | null\n  ) => unknown;\n\n  /** CSS height of the frame container */\n  frameHeight: string;\n\n  /**\n   * Whether we'd measured the initial slide heights and are ready for the\n   * frame to control the children's height, rather than the other way around.\n   */\n  initializedAdaptiveHeight: boolean;\n} => {\n  const [visibleHeights, setVisibleHeights, visibleHeightsRef] =\n    useStateWithRef<SlideHeight[]>([]);\n\n  // Whether we've received heights of all initial visible heights\n  const [initializedAdaptiveHeight, setInitializedAdaptiveHeight] =\n    useState(false);\n\n  const handleVisibleSlideHeightChange = useCallback(\n    (slideIndex: number, height: number | null) => {\n      // Use the ref's value since it's always the latest value\n      const latestVisibleHeights = visibleHeightsRef.current;\n      let newVisibleHeights: SlideHeight[];\n      if (height === null) {\n        newVisibleHeights = latestVisibleHeights.filter(\n          (slideHeight) => slideHeight.slideIndex !== slideIndex\n        );\n      } else {\n        newVisibleHeights = [...latestVisibleHeights, { slideIndex, height }];\n      }\n      setVisibleHeights(newVisibleHeights);\n\n      if (\n        newVisibleHeights.length >=\n        Math.min(slideCount, Math.ceil(slidesToShow))\n      ) {\n        setInitializedAdaptiveHeight(true);\n      }\n    },\n    [slideCount, setVisibleHeights, slidesToShow, visibleHeightsRef]\n  );\n\n  const frameHeight = useMemo(() => {\n    if (adaptiveHeight) {\n      // We want server-side-rendering to render the carousel with non-zero\n      // height. to achieve this, we first set the height to `auto` until\n      // we've received the heights of the visible slides. Then, we switch to\n      // a mode where the frame controls the height.\n      if (!initializedAdaptiveHeight) {\n        return 'auto';\n      }\n\n      const maxHeight = Math.max(\n        0,\n        ...visibleHeights.map((height) => height.height)\n      );\n      return `${maxHeight}px`;\n    } else {\n      return 'auto';\n    }\n  }, [adaptiveHeight, initializedAdaptiveHeight, visibleHeights]);\n\n  return {\n    handleVisibleSlideHeightChange,\n    frameHeight,\n    initializedAdaptiveHeight,\n  };\n};\n","import { MutableRefObject, useCallback, useRef, useState } from 'react';\n\n/**\n * Like useState, but also returns a ref that's always instantly updated.\n *\n * This is useful in two cases:\n *\n * 1. You need to both force a re-render when a variable changes, and\n *    also avoid re-running side effects (for example, a network call), even\n *    before the state fully updates for the component.\n * 2. Multiple callbacks need to modify the same object or array before the\n *    state updates. For example, if one callback tries to append 4 to\n *    `[1, 2, 3]` and another tries to append 5, we may end up with only\n *    `[1, 2, 3, 5]` instead of `[1, 2, 3, 4, 5]`\n */\nexport const useStateWithRef = <S>(\n  initialState: S\n): [S, (newValue: S) => void, MutableRefObject<S>] => {\n  const [value, setValue] = useState(initialState);\n  // Need to explicitly type this out, or the overloads can confuse the\n  // compiler to think that this might be a React Component ref\n  const valueRef = useRef<S>(initialState) as MutableRefObject<S>;\n\n  const setValueAndRef = useCallback((newValue: S) => {\n    valueRef.current = newValue;\n    setValue(newValue);\n  }, []);\n\n  return [value, setValueAndRef, valueRef];\n};\n"],"mappings":"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","names":["React","useEffect","useState","useRef","useCallback","useRef","useEffect","entry","useRef","entry","useEffect","_a","jsx","React","useEffect","Alignment","Directions","Positions","ScrollMode","jsx","useEffect","useState","useRef","normalizedTime","jsx","React","useEffect","jsx","Fragment","jsx","useCallback","useState","useCallback","useRef","useState","useState","useCallback","jsx","React","useState","useCallback","useRef","useEffect"]}